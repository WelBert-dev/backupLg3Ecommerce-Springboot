

referência boa: https://github.com/osopromadze/Spring-Boot-Blog-REST-AP

URL_API_BASE: http://localhost:8080/api/usuario
GET Listar todos: /listarTodos
POST cadastrar new user: /create (Pelo body)
GET validar senha: /validarSenha (Parametro URL)

------------------------------------------// API -----------------------------

~ Oque é uma API? Application Programming Interface (Interface de Programação de Aplicação).

	- É Uma aplicação que abstrai a complexidade e serve como uma interface, de requisições
	normalmente com retorno JSON

	- Essa é a diferença entre a aplicação convencional que "cospe" view,
	e ao invés disto, "cospe" um array de objetos

~ Porque ela é bastante utilizada hoje em dia?

	- Desacoplamento, ou seja separar a aplicação em sí de outras tecnologias.

	- Pois assim, podemos integrar facilmente com outras tecnologias, não apenas web
	mas também consumir recursos e apresentar em diferentes tecnologias,
	mobile, desktop dentre outros...

	- Antes de existir esse conceito, fazendo uma aplicação que "cospe"
	view faz um acoplamento com essas tecnologias, e se no futuro
	desejar escalar para outras tecnologias de apresentação, 
	não sera facil essa migração...

------------------------------------------ // REST / API REST -----------------

~ Oque é REST? ou RESTFULL? para que diaxo serve isto?
	
	- Representational State Transfer (Transferência de estado representacional) EOQ
	- Só é suportado apartir da versão 1.1 do protocolo HTTP
	- Ou seja, é um conjunto de regras que retornam o estado atual dos objetos no servidor
		exemplo: numero de vizualizações de um vídeo x: tal <- estado atual do objeto "video"
	- Resumido: é um padrão que todos devem entender (tipo um protocolo), e ele possui algumas regras
	porisso os conceitos "rest e restFull", ou seja se respeita todas as regras pode ser conciderado "Full"

	- Conceitos REST: Utilizar da semântica HTTP.
	- Oque seria essa semântica?
		Significado, pois o protocolo HTTP possui aqueles verbos la (GET, POST, PUT, DELETE..)
	- resumindo: Ao requisitar um usuário utilizamos o /usuario com o método GET (pegar)
		     Ao salvar um novo usuário utilizamos o /usuario com o método POST (Enviar)
		     Ao atualizar um usuário ja existente utilizamos o /usuario com o método PUT (Atualizar)
		     Ao deletar um usuário ja existênte utilizamos o /usuario com o método DELETE (Deletar)
	- Viu como fica "semântico"? vc sabe as ações que estão sendo tomadas de acordo com os métodos HTTP 
	- Assim fica mais facil de implementar e dar manutenções por existir esse "padrão".

	- Stateless: Ou seja, cada requisição é completamente independênte
	não sendo armazenado nenhum estado do lado do servidor
	
	- Utiliza a URI para passar as informações.
	- Utiliza dos métodos GET, POST, PUT e DELETE do HTTP.
	- Utiliza dos mime-type (Contente-type) tipo de conteúdo para solicitar e retornar o conteúdo,
		sendo eles: JSON, XML, HTML, PDF, TXT, e etc..
		expecificando o tipo de entrada e retorno da aplicação REST
	
		Formato mais utilizado: JSON (Foi oque eu adotei nessa API)

	- Essa integração e "semântica" do HTTP citada anteriormente em que o REST tem o objetivo de reforçar serve
	também para os resultados das requisições!
		- 200 OK
		- 201 Created (Quando cria um, recurso com POST por exemplo).
		- 204 No Content (Processo deu certo, porém não existe nenhum retorno)
		- 401 Unauthorized (Recurso que é necessário privilégios para acessar, ou seja ocorreu uma falha na autenticação)
		- 405 Method Not Alowed (Método HTTP solicitado não suportado, exemplo: usuário tenta utilizar o método
		DELETE e ele não é permitido.
		- Dentre outros..

	- Resumindo: REST Nada mais é que um estilo de arquitetura, aonde a ideia é dar essa "semântica" e padronizar
	as trocas de menssagens HTTP, assim por reforçar esses usos, facilita na implementação e manutenções
	aonde, não é preciso muito esforço para saber oque esta acontecendo.. pois se todos seguirem esse padrão
	a troca de mensagens HTTP ficam mais fluidas e com significado, 
	Não importa para o PC, nó fim tudo é um linguição de bits... "O código foi feito para o homen entender". :D

------------------------------------------ // Springboot ---------------------

~ Oque é/aonde mora/como vive Springboot? para que serve?

	- Framework Java, para facilitar nossa vida.
	- Bastante utilizado para criação de app web (SpringWeb).
	- O Spring possui varias ramificações sendo elas SpringWeb, SpringSecurity, SpringMVC, Spring JPA (Banco de dados e etc)
	- Porisso é bastante utilizado (talvez o framework Java mais famoso).
	- Bem completo para farios cenários não apenas nas tecnologias web.
	- Sintaxe simples e limpa (particularmente eu ja estudei ASP.NET da Microsoft, 
	e o Spring da 10 a 0 em relação ao clean, opinião pessoal rsrs)
	- Possui um conceito bem parecido com o react, aonde todos metodos/classes são componentes
	- Anotações (@Alguma coisa) <- essas anotações que definem um componente spring (bean)
	- Essas anotações fazem configurações "por debaixo dos panos" facilitando nossa vida.
	- Bastante documentação sobre e de graça (por ser o framework mais famoso, fonte: vozes da minha mente)
	- Estudando a 1 mês ja amando.

~ Como faço pra utilizar sajoça?
	
	- É bem simples, basta jogar "springboot initializer" no google.
	- Ir no primeiro site, selecionar as dependências necessárias.
	- e gerar o package, depois basta descompactar e abrir na sua IDE favorita.
	- de preferência utilizar o "inteliJ" pois é a IDE mais utilizada para trabalhar com java (mesma fonte anterior).

~ Como baixar as dependências selecionadas anteriormente?
	
	- Após todo o trâmite anterior, basta ir no arquivo "pom.xml"
	que se encontra na raiz do projeto e clicar no icon camarada.
	
	- Em teoria é bem simples adicionar mais dependências futuramente, se necessário!
	- basta copiar o codigo "xml" da dependência para "maven" e clicar no icon novamente.
		exemplo: tio google: spring security maven pom dependency	
 	- obs: se essa dependência for algum dos ramos do spring, não é necessário 
	informar a versão dessa dependência, pois o proprio spring é camarada
	e por debaixo dos panos ira gerenciar essas versões :D

	- EM CASO DE DEPENDENCIA NÂO SER UM DOS RAMOS SPRING é impressindível indicar a versão no pom
	
	- exemplo de xml dependency maven no pom:
	
	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-core</artifactId>
    		<version>5.7.5</version>
    	</dependency> 

----------------------------------------- // 1o - Preparando o banco ------------------------------------------------------
1o - Roda a aplicação e leia os erros!!

create database DB_LG3_RestauranteIFSP;
use DB_LG3_RestauranteIFSP;

create table usuario... que vai dar erro no console. (Obs: modificar a query para que o login seja UNIQUE.)

----------------------------------------- // JWT --------------------------------------------------------------------------
~ Oque é? aonde vive? oque come?

	- JSON Web Token.
	- Utilizado para garantir que o usuário possui permissões para acessar alguns recuros/endpoints das nossas APIS.
	- Fluxograma basico:
		- Login -> Váliso? (Recebe o TOKEN GERADO) Não Válido? (UNAUTORIZED) -> Futuras requisições LOOPING anterior
	- Composição de um TOKEN:
		- 1 parte (Header): {"alg":"HS256", "type":"JWT"} 
		Indica qual tipo de TOKEN e qual a criptografia utilizada
		- 2 parte (Payload) aonde esta contido as claims: {"id":10}
		- 3 parte (Signature): Assinatura, aonde faz um calculo e criptografa de acordo com o conteúdo do header + payload com a criptografia setada no proprio Header

----------------------------------------- // Curl e porque linha de comando? -----------------------------------------------
Curl é um navegador web porém sem interface gráfica.
Vantagem: Além de praticar linha de comando, é bem mais leve que um browser como o chrome, multiplataforma (Rindows, mac, Lindux e etc..) e
por utilizar linha de comando é possível integrar com outros programas e realizar ações mais complexas.

- Como assim? 
Como já estudado até hoje, sabemos que tudo no computador são arquivos (de "formatos" diferentes, podendo ser txt, PDF... e binários),
aonde esses "binários" são nada mais nada menos que programas executáveis, e para os mesmos é possível passar parâmetros que alteram seu comportamento.

Ai que esta a MAGICA da coisa, como assim  wellisu?
EXATAMENTE, rsrs.. 

Imagena um cenário aonde podemos "Extender" nosso cérebro?
SIM isso mesmo, saber como um computador opera é o mesmo que FUCKING EXTENDER o cérebro!

Nosso cérebro passa 24horas processando informações, controlando nosso corpo e CALCULANDO, e vc nem faz nada para isso acontecer! rsrs
O computador é basicamente isso, ele foi até inspirado em nós (com memória e etc), saber como um computador trabalha é o mesmo que EXTENDER,
o cérebro e assim gerar resultados INCRÍVEIS! ;D 

MATEMATICA é a linguagem do universo, pois ela descreve seu comportamento e RARAMENTE erra! é a linguagem mais IMPORTANTE conhecida pela humanidade,
e interagir com o PC é o mesmo que CONVERSAR com o UNIVERSO!

EU SOU RUIM EM MATEMATICA, hahaha meu fiooo, o PC FAZ O CALCULO PRA VC, basta pesquisar no GOOGLE a fórmula para o problema e PIMBA, o pc resolve
isso que eu quero dizer sobre EXTENDER a mente..

- Porque falam que programar é "Resolver problemas?" 
Pois grande parte de nosso tempo é entendendo o problema, apenas 10% é o código em sí, pois como dito antes.. queremos transformar um problema do MUNDO REAL
em código para que o computador faça o trabalho pesado!

e linha de comando é isso, você execultar um programa passando parametros para alterar seu comportamento natural e o resultado desse processamento passar para a entrada de outro programa, e assim vai até gerar um resultado observável!! isso é incrível, pois o limite é a sua imaginação!!

se isso não te convenceu a trocar o Ruindows pelo LINDUX eu não sei oq irá rsrs...

Então para demonstrar tudo isso na prática iremos realizar essas requisições por linha de comando NO PRÓPRIO ruindows de uma maneira bem simples e elegante!! 

----------------------------------------- // 2o - Criando o usuário inicial ----------------------------------------------
Obs: Necessário pois para outras requisições é necessário o token JWT (rotas liberadas: (/login) e (/api/usuario/create)

.\Downloads\curl-7.86.0_2-win64-mingw\bin\

curl -X POST -H 'Content-Type: application/json' -d '{"id":"1","login":"jubileu","password":"jubinaoleu123","firstName":"JubileuNão","lastName":"NaoLeu","email":"jubileu@hotmail.com"}' http://localhost:8080/api/user/create

curl -X POST -H 'Content-Type: application/json' -d '{"id":"2", "login":"jubiNaoLeu", "password":"jubinaoleu", "firstName":"Jubileu", "lastName":"NaoLeu", "email":"jubileu@hotmail.com", "perfilPermissao":"1"}' http://localhost:8080/api/usuario/create

- Criado ira retornar no console o Json!
- Testar uma requisição em outra rota privada, sem o TOKEN!

curl -L http://localhost:8080/api/user/getAll


.\Downloads\curl-7.86.0_2-win64-mingw\bin\curl -X POST -H 'Content-Type: application/json' -d '{"id":1,"login":"jubileu","password":"jubinaoleu123","firstName":"JubileuNão","lastName":"NaoLeu","email":"jubileu@hotmail.com"}' http://localhost:8080/api/user/create


.\Downloads\curl-7.86.0_2-win64-mingw\bin\curl -L http://localhost:8080/api/user/getAll
---------------------------------------- // 3o - Realiza login para obter o Token JWT ------------------------------------
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU3NTI5fQ.nWxXFhofBHU5_TmbvSuuJWXMolWWxroV_BkKeAmcrcGhAtniYS-PCplGctUyobgM6AU9HnVBJp5ux7_m3zNGkg
curl -X POST -H 'Content-Type: application/json' -d '{"login":"jubileu", "password":"jubinaoleu123"}' http://localhost:8080/login

- Ira retornar o Token

---------------------------------------- // 4o - Faz as requisições desejadas mandando o Token no header -----------------

curl -L --header 'Authorization: Bearer TOKEN' http://localhost:8080/api/user/getAll

curl -L --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU3NTI5fQ.nWxXFhofBHU5_TmbvSuuJWXMolWWxroV_BkKeAmcrcGhAtniYS-PCplGctUyobgM6AU9HnVBJp5ux7_m3zNGkg' http://localhost:8080/api/user/getAll


---------------------------------------- // 5o - Atualiza informações de usuário -----------------------------------------

---> Atualiza todas informações inclusive o Login Unique:

curl -X PUT -H 'Content-Type: application/json' --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU3NTI5fQ.nWxXFhofBHU5_TmbvSuuJWXMolWWxroV_BkKeAmcrcGhAtniYS-PCplGctUyobgM6AU9HnVBJp5ux7_m3zNGkg' -d '{"id":"1", "login":"Pamonha", "password":"Pamonha", "firstName":"Pamonha", "lastName":"Pamonha", "email":"pamonha@hotmail.com"}' http://localhost:8080/api/user/update

---> Atualiza todas informações, porém mantendo o login atualizado anterior:

curl -X PUT -H 'Content-Type: application/json' --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU3NTI5fQ.nWxXFhofBHU5_TmbvSuuJWXMolWWxroV_BkKeAmcrcGhAtniYS-PCplGctUyobgM6AU9HnVBJp5ux7_m3zNGkg' -d '{"id":"1", "login":"Pamonha", "password":"jubileu123", "firstName":"Jusisclaudio", "lastName":"da Silva", "email":"jusisclaudio@hotmail.com"}' http://localhost:8080/api/user/update

---> Atualiza todas informações porém passando Id inexistente:

curl -X PUT -H 'Content-Type: application/json' --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU3NTI5fQ.nWxXFhofBHU5_TmbvSuuJWXMolWWxroV_BkKeAmcrcGhAtniYS-PCplGctUyobgM6AU9HnVBJp5ux7_m3zNGkg' -d '{"id":"2", "login":"Pamonha", "password":"jubileu123", "firstName":"Jusisclaudio", "lastName":"da Silva", "email":"jusisclaudio@hotmail.com"}' http://localhost:8080/api/user/update

---------------------------------------- // 6o - Deleta um usuário -----------------------------------------

curl -X DELETE -H 'Content-Type: application/json' --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU4NTQ0fQ.76DHN4jKwo9lwoKw0NWLWdwPds4smnxtvtlnXzC-T-63drZqRnvCpYUlsy-H-9gNCj_yrscmG25617rnB0oZKw' -d '{"id":"1"}' http://localhost:8080/api/user/delete


curl -X DELETE -H 'Content-Type: application/json' --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWJpbGV1IiwiZXhwIjoxNjY5NjU4NDA2fQ.14zEekBR8rwiQOcA5-4DpYQ89Hdp9l4V77oLFNVXPut9woR-40fd2lxVreJqF7nEx9lKR12s-oM9v-CuJ1YCkg' -d '{"id":"1", "login":"Pamonha", "password":"Pamonha", "firstName":"Pamonha", "lastName":"Pamonha", "email":"pamonha@hotmail.com", "perfilPermissao":"1"}' http://localhost:8080/api/user/delete

-------------------------------------------------------------------------------------------------------------------------------------

- Salvando um novo usuário: 

curl -X POST -H 'Content-Type: application/json' -d '{"id":"1", "login":"wellison", "password":"wel123", "firstName":"Wellison", "lastName":"Bertelli", "email":"wellison@hotmail.com", "perfilPermissao":"2"}' http://localhost:8080/api/usuario/create 

curl -X POST -H 'Content-Type: application/json' -d '{"id":"2", "login":"pamonha", "password":"kiritu123", "firstName":"Irineu", "lastName":"InemEu", "email":"inemeu@hotmail.com", "perfilPermissao":"2"}' http://localhost:8080/api/usuario/create  

curl -X POST -H 'Content-Type: application/json' -d '{"id":"3", "login":"poçoka", "password":"eoq123", "firstName":"Irineia", "lastName":"InemTu", "email":"irineia@hotmail.com", "perfilPermissao":"2"}' http://localhost:8080/api/usuario/create  

curl -X POST -H 'Content-Type: application/json' -d '{"id":"4", "login":"paparazzi", "password":"papa123", "firstName":"Paparazzi", "lastName":"Bertelli", "email":"paparazzi@hotmail.com", "perfilPermissao":"2"}' http://localhost:8080/api/usuario/create  

curl -X POST -H 'Content-Type: application/json' -d '{"id":"5", "login":"jubileu", "password":"jubinaoleu123", "firstName":"Jubileu", "lastName":"NaoLeu", "email":"jubileu@hotmail.com", "perfilPermissao":"2"}' http://localhost:8080/api/usuario/create


------------------------------------------ // Motivos para separar a aplicação em camadas/tecnologias: ----------------

- Tomei essa abordagem pois o mercado esta caminhando para isto, e o motivo maior é Desacoplamento de tecnologias!

- Como assim wellisu?
- Isso mesmo, separamos as tecnologias web (HTML+CSS+Javascript) do core do sistema (Springboot)
- Vantagens: 
	- Melhor manutenção pois as tecnologias ficam separadas e trocam mensagens com algum protocolo que ambas conhecem (JSON, XML...).
	- Desacoplamento, pois utilizando a abordagem tradicional "cuspindo" views forçamos que quem recebe deve conhecer essas tecnologias.
	- Com isto podemos: Consumir o core do sistema com uma apresentação Mobile, Desktop (Windows forms) dentre outras tecnologias distintas.
	- Então basta construir o core "cuspindo" algum protocolo "universal" e simples, para consumi-lo por outras tecnologias de uma forma mais simples.
	- Da mais trabalho, porém a escalabilidade é maior, além de separarmos a mão de obra (pois anteriormente "cuspindo" views o programador tem que ser Fullstack).
	- Código mais limpo, pois não vai ocorrer essas misturas de códigos distintos.
	- Com isto temos códigos mais inteligêntes e compreensíveis aos humanos.


------------------------------------------ // Conceitos e Abordagens tomadas no Frontend: -----------------

- Devido ao meu PC da xuxa não foi possível integrar o servidor Spring com o servidor React e sentir como é a programação na vida real.
- Mas não seja por isso, vamos aprender pois é uma delicia rsrs...

- Autenticação e Autorização:
- Router (React Router Dom) <- Aplicando aqui também o conceito a cima.
- CRUD Client-Side (LocalStorage)
- 

------------------------------------------ // Autenticação e Autorização:

- Login "Quem é o indivíduo"?
- Quais as permissões no site esse indivíduo possuí?

- Autorização são as permissões do usuário autenticado, e com ela temos dois níveis de permissões sendo eles:

- A Nível de componentes, e a Nível de rotas.


------------------------------------------ // Router (React Router Dom) <- lib para controle de rotas:

- 

